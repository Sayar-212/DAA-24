#include <limits.h>
#include <stdio.h>
#include <stdlib.h>

struct Node {
  int dest;
  int weight;
  struct Node *next;
};

struct List {
  struct Node *head;
};

struct Graph {
  int V;
  struct List *array;
};

struct HeapNode {
  int v;
  int dist;
};

struct Heap {
  int size;
  int capacity;
  int *pos;
  struct HeapNode **array;
};

struct Node *createNode(int dest, int weight) {
  struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
  newNode->dest = dest;
  newNode->weight = weight;
  newNode->next = NULL;
  return newNode;
}

struct Graph *createGraph(int V) {
  struct Graph *graph = (struct Graph *)malloc(sizeof(struct Graph));
  graph->V = V;

  graph->array = (struct List *)malloc(V * sizeof(struct List));

  int i;
  for (i = 0; i < V; ++i)
    graph->array[i].head = NULL;

  return graph;
}

void addEdge(struct Graph *graph, int src, int dest, int weight) {
  struct Node *newNode = createNode(dest, weight);
  newNode->next = graph->array[src].head;
  graph->array[src].head = newNode;

  newNode = createNode(src, weight);
  newNode->next = graph->array[dest].head;
  graph->array[dest].head = newNode;
}

struct HeapNode *newHeapNode(int v, int dist) {
  struct HeapNode *heapNode =
      (struct HeapNode *)malloc(sizeof(struct HeapNode));
  heapNode->v = v;
  heapNode->dist = dist;
  return heapNode;
}

struct Heap *createHeap(int capacity) {
  struct Heap *heap = (struct Heap *)malloc(sizeof(struct Heap));
  heap->pos = (int *)malloc(capacity * sizeof(int));
  heap->size = 0;
  heap->capacity = capacity;
  heap->array =
      (struct HeapNode **)malloc(capacity * sizeof(struct HeapNode *));
  return heap;
}

void swap(struct HeapNode **a, struct HeapNode **b) {
  struct HeapNode *t = *a;
  *a = *b;
  *b = t;
}

void heapify(struct Heap *heap, int index) {
  int smallest, left, right;
  smallest = index;
  left = 2 * index + 1;
  right = 2 * index + 2;

  if (left < heap->size &&
      heap->array[left]->dist < heap->array[smallest]->dist)
    smallest = left;

  if (right < heap->size &&
      heap->array[right]->dist < heap->array[smallest]->dist)
    smallest = right;

  if (smallest != index) {
    struct HeapNode *smallestNode = heap->array[smallest];
    struct HeapNode *indexNode = heap->array[index];

    heap->pos[smallestNode->v] = index;
    heap->pos[indexNode->v] = smallest;

    swap(&heap->array[smallest], &heap->array[index]);

    heapify(heap, smallest);
  }
}

int isEmpty(struct Heap *heap) { return heap->size == 0; }

struct HeapNode *getMin(struct Heap *heap) {
  if (isEmpty(heap))
    return NULL;

  struct HeapNode *root = heap->array[0];

  struct HeapNode *lastNode = heap->array[heap->size - 1];
  heap->array[0] = lastNode;

  heap->pos[root->v] = heap->size - 1;
  heap->pos[lastNode->v] = 0;

  --heap->size;
  heapify(heap, 0);

  return root;
}

void decreaseKey(struct Heap *heap, int v, int dist) {
  int i = heap->pos[v];

  heap->array[i]->dist = dist;

  while (i && heap->array[i]->dist < heap->array[(i - 1) / 2]->dist) {
    heap->pos[heap->array[i]->v] = (i - 1) / 2;
    heap->pos[heap->array[(i - 1) / 2]->v] = i;
    swap(&heap->array[i], &heap->array[(i - 1) / 2]);

    i = (i - 1) / 2;
  }
}

int isInHeap(struct Heap *heap, int v) {
  if (heap->pos[v] < heap->size)
    return 1;
  return 0;
}

void printAdjacencyList(struct Graph *graph,
                        int V) { // Function to print adjacent list
  for (int i = 0; i < V; i++) {
    struct Node *temp = graph->array[i].head;
    printf("Adjacency list of vertex %d\n", i);
    while (temp != NULL) {
      printf(" -> %d(%d)", temp->dest, temp->weight);
      temp = temp->next;
    }
    printf("\n");
  }
}

int *dijkstraShortestPath(struct Graph *graph, int src, int V, int *parent) {
  int *dist = (int *)malloc(V * sizeof(int));
  struct Heap *heap = createHeap(V);

  for (int v = 0; v < V; ++v) {
    dist[v] = INT_MAX;
    parent[v] = -1;
    heap->array[v] = newHeapNode(v, dist[v]);
    heap->pos[v] = v;
  }

  heap->array[src] = newHeapNode(src, dist[src]);
  heap->pos[src] = src;
  dist[src] = 0;
  decreaseKey(heap, src, dist[src]);

  heap->size = V;

  while (!isEmpty(heap)) {
    struct HeapNode *heapNode = getMin(heap);
    int u = heapNode->v;

    struct Node *pq = graph->array[u].head;
    while (pq != NULL) {
      int v = pq->dest;

      if (isInHeap(heap, v) && dist[u] != INT_MAX &&
          pq->weight + dist[u] < dist[v]) {
        dist[v] = dist[u] + pq->weight;
        parent[v] = u;
        decreaseKey(heap, v, dist[v]);
      }
      pq = pq->next;
    }
  }

  free(heap->array);
  free(heap->pos);
  free(heap);
  return dist;
}

void printSP(int *parent, int *dist, int V) {
    int i, j;
    for (i = 0; i < V; i++) {
        printf("Vertex %d -> Vertex %d = %d\n", 0, i, dist[i]);
        printf("Path:\n");
        for (j = i; j != -1; j = parent[j]) {
            printf("%d", j);
            if (parent[j] != -1) {
                printf(" <- ");
            }
        }
        printf("\n");
    }
}

int main() {
  FILE *file = fopen("graph.txt", "r");
  if (file == NULL) {
    printf("Error opening the file.\n");
    return 1;
  }

  int n, m;
  fscanf(file, "%d %d", &n, &m);

  struct Graph *graph = createGraph(n);

  for (int i = 0; i < m; i++) {
    int src, dest, weight;
    fscanf(file, "%d %d %d", &src, &dest, &weight);
    addEdge(graph, src, dest, weight);
  }
  fclose(file);

  printf("Adjacency list of the graph:\n");
  printAdjacencyList(graph, n);

  printf("Shortest path from source to destination: ");
  int *parent = (int *)malloc(n * sizeof(int));
  int *dist = dijkstraShortestPath(graph, 0, n, parent);

  for (int i = 0; i < n; i++)
    printf(" %d", dist[i]);
  printf("\nparent\n");
  for (int i = 0; i < n; i++)
    printf(" %d", parent[i]);
  printf("\n");

  // printShortestPath(parent, n);
  printSP(parent, dist, n);
  printf("\n");

  // Free dynamically allocated memory
  free(parent);
  free(dist);
  free(graph->array);
  free(graph);

  return 0;
}
